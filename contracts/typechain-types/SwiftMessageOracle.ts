/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SwiftMessageOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "jobCounter"
      | "oracle"
      | "requestVerification"
      | "requests"
      | "submitVerification"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "VerificationCompleted" | "VerificationRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "jobCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestVerification",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVerification",
    values: [BigNumberish, boolean, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "jobCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitVerification",
    data: BytesLike
  ): Result;
}

export namespace VerificationCompletedEvent {
  export type InputTuple = [jobId: BigNumberish, verified: boolean];
  export type OutputTuple = [jobId: bigint, verified: boolean];
  export interface OutputObject {
    jobId: bigint;
    verified: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationRequestedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    requester: AddressLike,
    swiftCode: string
  ];
  export type OutputTuple = [
    jobId: bigint,
    requester: string,
    swiftCode: string
  ];
  export interface OutputObject {
    jobId: bigint;
    requester: string;
    swiftCode: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SwiftMessageOracle extends BaseContract {
  connect(runner?: ContractRunner | null): SwiftMessageOracle;
  waitForDeployment(): Promise<this>;

  interface: SwiftMessageOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  jobCounter: TypedContractMethod<[], [bigint], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  requestVerification: TypedContractMethod<
    [swiftCode: string],
    [bigint],
    "nonpayable"
  >;

  requests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean] & {
        requester: string;
        swiftCode: string;
        verified: boolean;
      }
    ],
    "view"
  >;

  submitVerification: TypedContractMethod<
    [jobId: BigNumberish, verified: boolean, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "jobCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "requestVerification"
  ): TypedContractMethod<[swiftCode: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "requests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean] & {
        requester: string;
        swiftCode: string;
        verified: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitVerification"
  ): TypedContractMethod<
    [jobId: BigNumberish, verified: boolean, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "VerificationCompleted"
  ): TypedContractEvent<
    VerificationCompletedEvent.InputTuple,
    VerificationCompletedEvent.OutputTuple,
    VerificationCompletedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationRequested"
  ): TypedContractEvent<
    VerificationRequestedEvent.InputTuple,
    VerificationRequestedEvent.OutputTuple,
    VerificationRequestedEvent.OutputObject
  >;

  filters: {
    "VerificationCompleted(uint256,bool)": TypedContractEvent<
      VerificationCompletedEvent.InputTuple,
      VerificationCompletedEvent.OutputTuple,
      VerificationCompletedEvent.OutputObject
    >;
    VerificationCompleted: TypedContractEvent<
      VerificationCompletedEvent.InputTuple,
      VerificationCompletedEvent.OutputTuple,
      VerificationCompletedEvent.OutputObject
    >;

    "VerificationRequested(uint256,address,string)": TypedContractEvent<
      VerificationRequestedEvent.InputTuple,
      VerificationRequestedEvent.OutputTuple,
      VerificationRequestedEvent.OutputObject
    >;
    VerificationRequested: TypedContractEvent<
      VerificationRequestedEvent.InputTuple,
      VerificationRequestedEvent.OutputTuple,
      VerificationRequestedEvent.OutputObject
    >;
  };
}
